@page "/ManageReservations"
@using OSsemes.Data.Database;
@using System.Security.Claims;
@inject NavigationManager navManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DataContext db
@inject Room scopedRoom
@inject Rezervation scopedRes
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<InfoModal @ref="chResMod" Text="@infoModText">
</InfoModal>
<ApproveModal @ref="deleteMod" Text="Naozaj chcete odstrániť túto rezerváciu?"
              Header="Odstániť"
              FuncOnSucc="() => Vymaz(oznRezerv)"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>

<header>
    <div class="pricing-header p-3 pb-md-4 mx-auto text-center">
        <h1 class="display-4 fw-normal text-body-emphasis txt-font-own">Všetky rezervácie</h1>
        <p class="fs-5 text-body-secondary"></p>
    </div>
</header>

@if (MaRezervacie())
{
    <div class="overflow-scroll" style="max-height: 18rem; min-height: 5rem">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Číslo rezervácie</th>
                    <th scope="col">Email hosťa</th>
                    <th scope="col">Meno hosťa</th>
                    <th scope="col">Dátum príchodu</th>
                    <th scope="col">Dátum odchodu</th>
                    <th scope="col">Číslo izby</th>
                    <th scope="col">Počet osôb</th>
                    <th scope="col">Suma k zaplateniu</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var activeR in db.Rezervations.Include(r => r.Guest).Include(r => r.Room).Include(c => c.Coupon).Where(x => x.DepartureDate >= DateTime.Now))
                {
                    <tr>
                        <th scope="row">@activeR.Id</th>
                        <td>@activeR.Guest.Email</td>
                        <td>@(activeR.Guest.Surname + " " + activeR.Guest.Name)</td>
                        <td>@activeR.ArrivalDate.ToString("dd.MM.yyyy")</td>
                        <td>@activeR.DepartureDate.ToString("dd.MM.yyyy")</td>
                        <td>@activeR.RoomNumber</td>
                        <td>@activeR.NumberGuest</td>
                        <td>@activeR.CelkovaSuma</td>
                        <td>
                            <button type="button" @onclick="(() => Zmen(activeR))"><i class="bi bi-calendar-range"></i></button>
                            <button type="button" @onclick="(() => VymazAsync(activeR))"><i class="bi bi-calendar-x"></i></button>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}
else
{
    <div class="position-relative" style="min-height:7rem">
        <div class="position-absolute  top-50  start-50 translate-middle ">
            <strong>Žiadne aktívne rezervácie</strong>
        </div>
    </div>
}

@code {



    private ClaimsPrincipal user;
    private InfoModal chResMod;
    private ApproveModal deleteMod;
    private Rezervation oznRezerv;

    private string infoModText = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated || user.IsInRole("Guest"))     //ak neni nikto prihlaseny
        {
            navManager.NavigateTo("#");
            return;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await sessionStorage.GetItemAsync<bool>("ResModified"))
            {
                infoModText = "Rezervácia bola úspešné zmenená.";
                await chResMod.OpenModal();
                await sessionStorage.SetItemAsync("ResModified", false);
            }
        }
    }

    private bool MaRezervacie()
    {
        return db.Rezervations.FirstOrDefault(x => x.DepartureDate >= DateTime.Now) != null; //ak existuje zaznam, ktory ma datum odchodu vacsirovny ako terajsi datum(uz je po ubytovani)
    }

    private void Zmen(Rezervation active)
    {
        scopedRes.setFromReservation(active);
        scopedRoom.setFromOtherRoom(new Room());
        navManager.NavigateTo("Accommodation/Reserve");
        return;
    }

    private async void VymazAsync(Rezervation active)       //otvori sa modal s potvrdenim
    {
        oznRezerv = active;
        await deleteMod.OpenModal();
    }
    private void Vymaz(Rezervation active)
    {
        if (active.Coupon is not null) //ak mame kupon tak ho znova aktivujeme pre dalsie pouzitie
        {
            active.Coupon.IsUsed = false;
        }
        db.Remove(active);
        db.SaveChanges();
    }
}
