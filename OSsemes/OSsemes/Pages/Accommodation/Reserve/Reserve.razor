@page "/Accommodation/Reserve"
@using System.ComponentModel.DataAnnotations;
@using OSsemes.Areas.Identity.Data;
@using System.Security.Claims;
@using OSsemes.Data.Database;
@inject NavigationManager navManager
@inject Room scopedRoom
@inject Rezervation scopedRes
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DataContext db
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<InfoModal @ref="infoMod"
           Text="Daný termím je dostupný ale pre rezerváciu je potrebné sa prihlásiť/registrovať"
           Header="Nutné prihlásenie"
           FuncAction="RegisterLink">
</InfoModal>
<h3>Reserve: @scopedRoom.RoomName</h3>

<EditForm EditContext="editContext" OnValidSubmit="ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <div class="form-group ms-3">
        <label for="NumPeople">Počet osôb</label>
        <InputNumber id="NumPeople" @bind-Value="model.NumPeople" class="form-control w-25" />
    </div>

    <div class="form-group ms-3">
        <label for="ArrivalDate">Dátum príchodu</label>
        <InputDate id="ArrivalDate" @bind-Value="model.ArrivalDate" class="form-control w-25" />
    </div>

    <div class="form-group ms-3">
        <label for="DepartureDate">Dátum odchodu</label>
        <InputDate id="DepartureDate" @bind-Value="model.DepartureDate" class="form-control w-25" />
    </div>

    <button type="submit" class="btn btn-primary m-3" @onclick="clearValMess">Objednať</button>
</EditForm>





@code {

    private FormRegi model { get; set; } = new FormRegi();
    private ClaimsPrincipal user;
    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;
    private InfoModal infoMod;



    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(scopedRoom.RoomName) && string.IsNullOrEmpty(scopedRes.GuestId))        //ak sa niekto dostane na stranku bez kliknutia na rezervovat alebo modify
        {
            navManager.NavigateTo("#");
        }
        if (!string.IsNullOrEmpty(scopedRes.GuestId))
        {
            model.NumPeople = scopedRes.NumberGuest;
            model.ArrivalDate = scopedRes.ArrivalDate;
            model.DepartureDate = scopedRes.DepartureDate;
        }

        editContext = new EditContext(model);
        validationMessageStore = new ValidationMessageStore(editContext);


    }

    private void clearValMess()
    {
        validationMessageStore.Clear();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        // if (user.FindFirstValue(ClaimTypes.NameIdentifier) is null)
        // {
        //     //pridat session a vypisat modal, poppup
        //     navManager.NavigateTo("#");
        // }


    }


    private async void ValidSubmit()
    {

        if (model.NumPeople > 3)  //scopedRoom.MaxNumberOfGuest
        {
            validationMessageStore.Add(editContext.Field(nameof(FormRegi.NumPeople)), "Počet ľudí nesmie prekročiť kapacitu izby");    //vlastny error
            editContext.NotifyValidationStateChanged();     //vizualna aktualizacia
            return;
        }
        if ((int)(model.ArrivalDate.Value.Date - DateTime.Now.Date).TotalDays <= 0)
        {
            validationMessageStore.Add(editContext.Field(nameof(FormRegi.ArrivalDate)), "Dátum príchodu musí byť neskorej ako je dnešný dátum " + model.ArrivalDate.Value.ToString("MM-dd-yyyy"));    //vlastny error
            editContext.NotifyValidationStateChanged();     //vizualna aktualizacia
            return;
        }

        int rozdielMedziDatumami = (int)(model.DepartureDate.Value.Date - model.ArrivalDate.Value.Date).TotalDays;
        if (rozdielMedziDatumami <= 0)
        {
            validationMessageStore.Add(editContext.Field(nameof(FormRegi.DepartureDate)), "Dátum odchodu musí byť neskorej ako je dátum príchodu");    //vlastny error
            editContext.NotifyValidationStateChanged();     //vizualna aktualizacia
            return;
        }
        if (rozdielMedziDatumami > 30)
        {
            validationMessageStore.Add(editContext.Field(nameof(FormRegi.ArrivalDate)), "Nie je možné zarezevovať pobyt dlhší ako 30 dní");    //vlastny error
            editContext.NotifyValidationStateChanged();     //vizualna aktualizacia
            return;
        }

        //todo dorobit overenie exitujucich


        Rezervation rezervacia = new Rezervation()      //vytvori rezervaciu
            {
                NumberGuest = model.NumPeople,
                ArrivalDate = model.ArrivalDate.Value.Date,
                DepartureDate = model.DepartureDate.Value.Date,
            };

        var userid = user.FindFirstValue(ClaimTypes.NameIdentifier);    //ziska sa ID aktualne prihlaseneho usera
        if (userid is not null)
        {
            var IdenUser = db.Users.First(x => x.Id == userid); //mozno vymazat
            if (IdenUser is not null)
            {
                scopedRoom.setFromOtherRoom(new Room());        //vycistenie
                rezervacia.GuestId = userid;            //pridanie prihlaseneho usera do rezervacie
                rezervacia.Guest = IdenUser;            //mozno vymazat

                if (scopedRes.Id != 0 && userid == scopedRes.GuestId)       //modifikacia
                {
                    rezervacia.Id = scopedRes.Id;
                    scopedRes.setFromReservation(new Rezervation());
                    db.Rezervations.First(x => x.Id == rezervacia.Id).setFromReservation(rezervacia);
                    await db.SaveChangesAsync();            //ulozenie stavu
                    navManager.NavigateTo("MyReservations");
                    return;
                }
                db.Rezervations.Add(rezervacia);        //pridanie rezervacie
                await db.SaveChangesAsync();            //ulozenie stavu
                await sessionStorage.SetItemAsync("ResCreated", true);          //nastavenie ze sa uspesne vytvorila rezervacia
                navManager.NavigateTo("#");
            }
        }
        else
        {
            //ak neni prihlaseny pouzivatel tak sa ho presmeruje na registraciu
            //await sessionStorage.SetItemAsync("ResOK_NoLoggin", true);          //nastavenie lokalneho ulozenia
           //scopedRes.setFromReservation(rezervacia);                   //ulozenie aktualnej rezervacie
            await infoMod.OpenModal();
        }



    }

    private void RegisterLink()
    {
        navManager.NavigateTo("Identity/Account/Register", true);
    }





    public class FormRegi
    {
        [Required]
        [Range(1, 10, ErrorMessage = "Počet ľudí od 1 - 10")]
        public int NumPeople { get; set; } = 1;

        [Required]
        [DataType(DataType.Date, ErrorMessage = "Chybne zadaný dátum príchodu")]
        public DateTime? ArrivalDate { get; set; } = DateTime.Now.AddDays(1);

        [Required]
        [DataType(DataType.Date, ErrorMessage = "Chybne zadaný dátum odchodu")]
        public DateTime? DepartureDate { get; set; } = DateTime.Now.AddDays(1);
    }
}
